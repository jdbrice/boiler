<class xmlns="http://jessevdk.github.com/cldoc/1.0" abstract="true" id="jdb::TreeAnalyzer" name="TreeAnalyzer">
  <brief>Boiler for analyzing data distributed accross TTrees in many files</brief>
  <doc>Automatically loads the TTrees from each file into a TChain.
Formalizes the structure for the config file, automatically loading
the config, logger, reporter, and histobook objects. These become available to any subclass
</doc>
  <constructor abstract="yes" id="jdb::TreeAnalyzer::TreeAnalyzer" name="TreeAnalyzer">
    <brief>Creates the TreeAnalyzer and sets up members</brief>
    <doc>Creates the Reporter, HistoBook and initializes the TChain
If not filelist is given then data is loaded from the directory specified in the
config file. Otherwise the files in the filelist are used.

Optionally a jobPrefix can be used to allow for parallel execution such that
each job writes out to different files.
</doc>
    <argument id="jdb::TreeAnalyzer::TreeAnalyzer::config" name="config">
      <doc>XmlConfig with a node for the TreeAnalyzer config</doc>
      <type name="XmlConfig" qualifier="*" ref="jdb::XmlConfig#jdb::XmlConfig" />
    </argument>
    <argument id="jdb::TreeAnalyzer::TreeAnalyzer::np" name="np">
      <doc>Path to TreeAnalyzer node in config</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::TreeAnalyzer::TreeAnalyzer::fileList" name="fileList">
      <doc>Optional : filelist containg files to load into chain.
                         If not given then a directory should be specified in the config</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::TreeAnalyzer::TreeAnalyzer::jobPrefix" name="jobPrefix">
      <doc>Prefix for output files - useful for running in parallel.</doc>
      <type name="string" />
    </argument>
  </constructor>
  <destructor abstract="yes" id="jdb::TreeAnalyzer::~TreeAnalyzer" name="~TreeAnalyzer" />
  <method abstract="yes" id="jdb::TreeAnalyzer::make" name="make" virtual="yes">
    <brief>The maker function for publicly starting the job</brief>
    <doc>This is the main entry point of any job
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <field access="protected" id="jdb::TreeAnalyzer::logger" name="logger">
    <brief>The logging object for the job</brief>
    <type name="Logger" qualifier="*" ref="jdb::Logger#jdb::Logger" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::cfg" name="cfg">
    <brief>Project config</brief>
    <type name="XmlConfig" qualifier="*" ref="jdb::XmlConfig#jdb::XmlConfig" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::nodePath" name="nodePath">
    <brief>Node path in config file to the root for everything related to this job</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::outputPath" name="outputPath">
    <brief>Basepath for output of data and reports</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::book" name="book">
    <brief>Store project histograms and data</brief>
    <type name="HistoBook" qualifier="*" ref="jdb::HistoBook#jdb::HistoBook" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::reporter" name="reporter">
    <brief>For generating generic reports</brief>
    <type name="Reporter" qualifier="*" ref="jdb::Reporter#jdb::Reporter" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::chain" name="chain">
    <brief>The chain object which gets automatically set up</brief>
    <type name="TChain" qualifier="*" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::nEventsToProcess" name="nEventsToProcess">
    <brief>the maximum number of events to process. If not set all events will be processed</brief>
    <type builtin="yes" name="int" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::ds" name="ds">
    <brief>Sets up a DataSource if there is a DataSource node</brief>
    <type name="DataSource" qualifier="*" ref="jdb::DataSource#jdb::DataSource" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::jobPrefix" name="jobPrefix">
    <brief>Prefix for this job ( optional, used for parallel)</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::TreeAnalyzer::skipMake" name="skipMake">
    <brief>Skips the making phase</brief>
    <doc>loads the output file of the same name as the input ( must exist )
and skips to the postEventLoop() method</doc>
    <type builtin="yes" name="bool" />
  </field>
  <method access="protected" id="jdb::TreeAnalyzer::analyzeEvent" name="analyzeEvent" virtual="yes">
    <brief> Used to analyze events</brief>
    <doc>Analyzes a single event in the chain
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method access="protected" id="jdb::TreeAnalyzer::analyzeEventBeforeCuts" name="analyzeEventBeforeCuts" virtual="yes">
    <brief> Used to analyze all events</brief>
    <doc>Events that do not pass the keepEvent are still processed
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method access="protected" id="jdb::TreeAnalyzer::analyzeRejectedEvent" name="analyzeRejectedEvent" virtual="yes">
    <brief> Used to analyze all events</brief>
    <doc>Events that do not pass the keepEvent are still processed
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="jdb::TreeAnalyzer::keepEvent" name="keepEvent" virtual="yes">
    <brief> Called for each event</brief>
    <doc>Function decides whether an event should be kept or not
Applies cuts to data
</doc>
    <return>
      <doc>True    - Keep Event
         False  - Skip event</doc>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method access="protected" id="jdb::TreeAnalyzer::postEventLoop" name="postEventLoop" virtual="yes">
    <doc>
Called after the event loop for cleanup,
report generation, etc."
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="jdb::TreeAnalyzer::preEventLoop" name="preEventLoop" virtual="yes">
    <brief> Called before event loop</brief>
    <doc>Used for setup + initialization before
        processing the entire loop

</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
</class>