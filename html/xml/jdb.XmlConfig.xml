<class xmlns="http://jessevdk.github.com/cldoc/1.0" abstract="true" id="jdb::XmlConfig" name="XmlConfig">
  <brief>Use xml formatted config files easily in projects</brief>
  <doc>Provides a high-level interface for xml formatted configuration files. </doc>
  <base access="public">
    <type name="IObject" />
  </base>
  <constructor abstract="yes" id="jdb::XmlConfig::XmlConfig" name="XmlConfig">
    <brief> Creates an XmlConfig from the given xml file</brief>
    <doc>Loads the file, parses its content and makes its data available
</doc>
    <argument id="jdb::XmlConfig::XmlConfig::filename" name="filename">
      <doc>The file containg valid xml to load</doc>
      <type name="string" />
    </argument>
  </constructor>
  <constructor abstract="yes" id="jdb::XmlConfig::XmlConfig" name="XmlConfig">
    <brief> Default Ctor, empty config</brief>
  </constructor>
  <constructor id="jdb::XmlConfig::XmlConfig" name="XmlConfig">
    <brief> Copy Ctor</brief>
    <doc>Copies maps to new object, it is now an effective copy of the original config
</doc>
    <argument id="jdb::XmlConfig::XmlConfig::rhs" name="rhs">
      <type name="XmlConfig" qualifier=" const &amp;" ref="jdb::XmlConfig#jdb::XmlConfig" />
    </argument>
  </constructor>
  <destructor abstract="yes" id="jdb::XmlConfig::~XmlConfig" name="~XmlConfig" virtual="yes">
    <brief> Dtor, closes resources</brief>
  </destructor>
  <method id="jdb::XmlConfig::add" name="add">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::XmlConfig::add::nodePath" name="nodePath">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::add::value" name="value">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::applyOverrides" name="applyOverrides">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::XmlConfig::applyOverrides::over" name="over">
      <type name="map&lt;string, string&gt;" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::attributeName" name="attributeName">
    <brief> Get the attribute name from a full path</brief>
    <doc>Extracts the attribute name from a full node path.
For instance:
The node path "category.sub.a:name" yields "name"

</doc>
    <return>
      <doc>The attribute name if the path contains one.
Empty string otherwise</doc>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::attributeName::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::attributesMap" name="attributesMap">
    <return>
      <type name="map&lt;string, string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::attributesMap::nodePath" name="nodePath">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::attributesOf" name="attributesOf">
    <brief> Get the attributes of a node</brief>
    <doc>One path is added for each attribute of the given
node or an empty list if no attributes
are present. Use attributeName( attributePath ) to
get only the attribute name from the full path.

</doc>
    <return>
      <doc>Vector of strings containg paths to each attribute</doc>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::attributesOf::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::basePath" name="basePath">
    <brief> Gets the base path from a node path</brief>
    <doc>Given 'Test.Node...' or '...Test.Node:bleh'
gives 'Test.Node'

</doc>
    <return>
      <doc>the path to the base node</doc>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::basePath::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::basePath::keepAttribute" name="keepAttribute">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::childrenOf" name="childrenOf">
    <brief> Lists the children of a node</brief>
    <doc>Gets a list of paths to all children of a given node.
Very useful for automating tasks, building lots of objects, etc.

</doc>
    <return>
      <doc>Vector of strings containg paths to each node or attribute</doc>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::childrenOf::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::childrenOf::depth" name="depth">
      <doc>The number of levels to search for children</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::XmlConfig::childrenOf::attrs" name="attrs">
      <doc>Show Attributes of node and children or not</doc>
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::childrenOf" name="childrenOf">
    <brief> Lists the children of a node selecting only a given tag</brief>
    <doc>Gets a list of paths to all children of a given node of the given tagName type.
Very useful for automating tasks, building lots of objects, etc.

        Just a special case of the more general childrenOf(...)

</doc>
    <return>
      <doc>Vector of strings containg paths to each node or attribute</doc>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::childrenOf::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::childrenOf::tagName" name="tagName">
      <doc>Filters children of the given tagName</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::childrenOf::depth" name="depth">
      <doc>depth to search - not yet implemented</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::classname" name="classname" virtual="yes">
    <return>
      <type builtin="yes" name="char" qualifier=" const *" />
    </return>
  </method>
  <method id="jdb::XmlConfig::cn" name="cn">
    <brief>*</brief>
    <doc>Sets the current node so that relative node paths can be used
</doc>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::cn::nodePath" name="nodePath">
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::depthOf" name="depthOf">
    <brief> Determines the depth of a node</brief>
    <doc>Calulates the depth of the node from the root node
</doc>
    <return>
      <doc>the depth of the given node. Children of the root node have depth 0</doc>
      <type builtin="yes" name="int" />
    </return>
    <argument id="jdb::XmlConfig::depthOf::nodePath" name="nodePath">
      <doc>Path to Node</doc>
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::depthOf" name="depthOf">
    <brief> Calculates the depth of a node relative to another node</brief>
    <return>
      <type builtin="yes" name="int" />
    </return>
    <argument id="jdb::XmlConfig::depthOf::nodePath" name="nodePath">
      <doc>Path to node of interest</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::depthOf::relativeTo" name="relativeTo">
      <doc>The node whose depth is considered 0</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::exists" name="exists">
    <brief> Determine whether a node exists in the xml or not</brief>
    <doc>Searches the xml structure for the given node.
</doc>
    <return>
      <doc>**True** - node or attribute is found. **False** otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::XmlConfig::exists::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getBool" name="getBool">
    <brief> Gets a node or attribute as bool type</brief>
    <doc>Can be string of any case "true", or "false"
Uses atoi(...)  to convert string data to builtin type bool
</doc>
    <return>
      <doc>The underlying xml data at nodePath as an builtin type bool</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::XmlConfig::getBool::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::getBool::def" name="def">
      <doc>Default value if the endpoint DNE or conversion to bool fails</doc>
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getDouble" name="getDouble">
    <brief> Gets a node or attribute as double type</brief>
    <doc>Uses atof(...) to convert string data to builtin type double
</doc>
    <return>
      <doc>The underlying xml data at nodePath as an builtin type double</doc>
      <type builtin="yes" name="double" />
    </return>
    <argument id="jdb::XmlConfig::getDouble::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::getDouble::def" name="def">
      <doc>Default value if the endpoint DNE or conversion to double fails</doc>
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getDoubleVector" name="getDoubleVector">
    <brief> Gets a vector of doubles from a comma delimeted list</brief>
    <return>
      <type name="vector&lt;double&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getDoubleVector::nodePath" name="nodePath">
      <doc>See getString(...)
See getStringVector(...).
Converts a comma separated list into a vector of double types.
Uses atof(...) for string to double conversion.</doc>
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::getFilename" name="getFilename">
    <return>
      <type name="string" />
    </return>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getFloat" name="getFloat">
    <brief> Gets a node or attribute as foat type</brief>
    <doc>Uses atof(...) and cast to convert string data to builtin type foat
</doc>
    <return>
      <doc>The underlying xml data at nodePath as an builtin type foat</doc>
      <type builtin="yes" name="float" />
    </return>
    <argument id="jdb::XmlConfig::getFloat::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::getFloat::def" name="def">
      <doc>Default value if the endpoint DNE or conversion to foat fails</doc>
      <type builtin="yes" name="float" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getInt" name="getInt">
    <brief> Gets a node or attribute as integer data</brief>
    <doc>Uses atoi(...) to convert string data to builtin type int
</doc>
    <return>
      <doc>The underlying xml data at nodePath as an builtin type integer</doc>
      <type builtin="yes" name="int" />
    </return>
    <argument id="jdb::XmlConfig::getInt::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::getInt::def" name="def">
      <doc>Default value if the endpoint DNE or conversion to int fails</doc>
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getIntMap" name="getIntMap">
    <return>
      <type name="map&lt;int, int&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getIntMap::nodePath" name="nodePath">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getIntVector" name="getIntVector">
    <brief> Gets a vector of integers from a comma delimeted list</brief>
    <return>
      <type name="vector&lt;int&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getIntVector::nodePath" name="nodePath">
      <doc>See getString(...)
See getStringVector(...).
Converts a comma separated list into a vector of int types.
Uses atoi(...) for string to int conversion.</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::getIntVector::defaultVal" name="defaultVal">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::XmlConfig::getIntVector::defaultLength" name="defaultLength">
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getNodes" name="getNodes">
    <brief> Find nodes based on search criteria</brief>
    <doc>Can be used to find nodes matching a conditions

**Case 1 )** Queries like : "group.node" returns a list
of paths to all nodes of the form "group.node[0..N]"

**Case 2 )** Queries like : "group.node:name" returns a
list of paths to all nodes of the form "group.node[0..N]"
when they contain a "*name*" attribute

**Case 3 )** Queries like : "group.node:name=value"
returns a list of paths to all nodes of the
form "group.node[0..N]" when they contain a "*name*"
attribute and it equals "*value*"

</doc>
    <return>
      <doc>A Vector of strings. One for each path to a
node or attribute matching the query</doc>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getNodes::nodePath" name="nodePath">
      <doc>Path to node. See getString(...). May also
contain conditional parts. See description.</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getString" name="getString">
    <brief> Gets xml node or attribute data as a string</brief>
    <doc>For an xml block like
``` xml
        &lt;root&gt;
                &lt;data&gt;
                        &lt;category&gt;
                                &lt;cut1 name="cut1" /&gt;
                        &lt;/category&gt;
                &lt;/data&gt;
        &lt;/root&gt;
```
The node "&amp;lt;cut1 /&amp;gt;" can be accessed using
the nodePath = "data.category.cut1" and its
attribute can be accessed using the nodePath =
"data.category.cut1:name"

</doc>
    <return>
      <doc>The underlying xml data at nodePath as a string</doc>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::getString::nodePath" name="nodePath">
      <doc>The path to the desired node from the root node. See examples below.</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::getString::def" name="def">
      <doc>**Default** = "" The value to return if the node or attribute is not found</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getStringMap" name="getStringMap">
    <brief> Gets a map&amp;lt;string, string&amp;gt; from a config node </brief>
    <return>
      <type name="map&lt;string, string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getStringMap::nodePath" name="nodePath">
      <doc>See getString(...)
Converts a node like :
``` xml
&lt;Map&gt;
                from : to,
                alpha : beta
&lt;/Map&gt;
```
Into a map where map[ "from" ] = "to" and map[ "alpha" ] = "beta".</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getStringVector" name="getStringVector">
    <brief> Gets a vector of strings from a comma delimeter list</brief>
    <return>
      <doc>A vector of strings or an empty vector if the node DNE</doc>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getStringVector::nodePath" name="nodePath">
      <doc>Path to node. See getString.
Gets a vector from a comma delimeted list.
For instance, if a node contains "1, 3, 9, 7, 16" then the vector whould contain 5 elements</doc>
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::indentation" name="indentation">
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::indentation::count" name="count">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::XmlConfig::indentation::tab" name="tab">
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::join" name="join">
    <brief> Joins two paths correctly</brief>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::join::paths" name="paths">
      <type name="std::initializer_list&lt;string &gt;" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::join" name="join">
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::join::a" name="a">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::join::b" name="b">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::join::c" name="c">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::join::d" name="d">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::join::e" name="e">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::join::f" name="f">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::loadFile" name="loadFile">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::XmlConfig::loadFile::filename" name="filename">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::operator[]" name="operator[]">
    <brief> Same as getString(...) but with the [] operator.</brief>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::operator[]::nodePath" name="nodePath">
      <doc>See getString(...)</doc>
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::pathToParent" name="pathToParent">
    <brief> Get the path to the parent of this node</brief>
    <doc>* @nodePath Path to node. See getString(...)
                 *
                 * Extracts the path to the parent of this node
                 * For instnce:
                 * The node path "category.sub.a" yields "category.sub"
                 *
                 * @return the path to the parent of given node
</doc>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::pathToParent::nodePath" name="nodePath">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::report" name="report">
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::report::nodePath" name="nodePath">
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::setDefaults" name="setDefaults">
    <brief> Sets the default strings / delimeters</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::split" name="split">
    <brief>Splits a string into pieces by the delimeter character</brief>
    <return>
      <doc>A vector of strings, one for each piece after
splitting on the delimeting character. If the delimeting
character is not found a zero length Vector is returned.</doc>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::split::s" name="s">
      <doc>Input string to split</doc>
      <type name="string" qualifier=" const &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::split::delim" name="delim">
      <doc>delimeting character</doc>
      <type builtin="yes" name="char" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::tagName" name="tagName">
    <brief> Get just the tag name from a full path</brief>
    <doc>Extracts the name of the final node (tag name )
For instnce:
The node path "category.sub.a" yields "a"

</doc>
    <return>
      <doc>the tag name of the node pointed to by nodePath</doc>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::tagName::nodePath" name="nodePath">
      <doc>Path to node. See getString(...)</doc>
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::toXml" name="toXml">
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::toXml::nodePath" name="nodePath">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::toXml::tabCount" name="tabCount">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::XmlConfig::toXml::tab" name="tab">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::toXml::nl" name="nl">
      <type name="string" />
    </argument>
  </method>
  <method id="jdb::XmlConfig::toXmlFile" name="toXmlFile">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::XmlConfig::toXmlFile::filename" name="filename">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::trim" name="trim">
    <brief>Trims characters off the front and back of strings</brief>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::trim::str" name="str">
      <doc>Input string to trim</doc>
      <type name="string" qualifier=" const &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::trim::whitespace" name="whitespace">
      <doc>A string containing characters to trim. **Default** = " \t\n".</doc>
      <type name="string" qualifier=" const &amp;" />
    </argument>
  </method>
  <field access="protected" id="jdb::XmlConfig::nodeExists" name="nodeExists">
    <brief>Node existance</brief>
    <type name="map&lt;string, bool&gt;" />
  </field>
  <field access="protected" id="jdb::XmlConfig::data" name="data">
    <brief>data - map of node path to string representation</brief>
    <type name="map&lt;string, string&gt;" />
  </field>
  <field access="protected" id="jdb::XmlConfig::isAttribute" name="isAttribute">
    <brief>does the nodepath point to an attribute value</brief>
    <type name="map&lt;string, bool&gt;" />
  </field>
  <field access="protected" id="jdb::XmlConfig::filename" name="filename">
    <brief>Filename of the config file</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::XmlConfig::attrDelim" name="attrDelim">
    <brief>The delimiter used for attributes - Default is ":"</brief>
    <type builtin="yes" name="char" />
  </field>
  <field access="protected" id="jdb::XmlConfig::pathDelim" name="pathDelim">
    <brief>The delimiter used for paths - Default is "."</brief>
    <type builtin="yes" name="char" />
  </field>
  <field access="protected" id="jdb::XmlConfig::equalDelim" name="equalDelim">
    <brief>The delimeter used for equality - Default is '='</brief>
    <type builtin="yes" name="char" />
  </field>
  <field access="protected" id="jdb::XmlConfig::mapDelim" name="mapDelim">
    <brief>The delimeter used for maps - Default is "::"</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::XmlConfig::indexOpenDelim" name="indexOpenDelim">
    <brief>The delimeter for index open - Default is "["</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::XmlConfig::indexCloseDelim" name="indexCloseDelim">
    <brief>The delimeter for index open - Default is "]"</brief>
    <type name="string" />
  </field>
  <field access="protected" id="jdb::XmlConfig::currentNode" name="currentNode">
    <brief>Current node for relative path finding</brief>
    <type name="string" />
  </field>
  <typedef access="protected" id="jdb::XmlConfig::const_map_it_type" name="const_map_it_type">
    <brief>map&amp;lt;string, string&amp;gt; const iterator</brief>
    <type name="__map_const_iterator&lt;__tree_const_iterator&lt;__value_type&lt;string, string &gt;&gt;" />
  </typedef>
  <typedef access="protected" id="jdb::XmlConfig::map_it_type" name="map_it_type">
    <brief>map&amp;lt;string, string&amp;gt; iterator</brief>
    <type name="__map_iterator&lt;__tree_iterator&lt;__value_type&lt;string, string &gt;&gt;" />
  </typedef>
  <method access="protected" id="jdb::XmlConfig::addAttribute" name="addAttribute">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::XmlConfig::addAttribute::nodePath" name="nodePath">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::addAttribute::value" name="value">
      <type name="string" />
    </argument>
  </method>
  <method access="protected" id="jdb::XmlConfig::addNode" name="addNode">
    <brief>Adding content</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::XmlConfig::addNode::nodePath" name="nodePath">
      <type name="string" />
    </argument>
    <argument id="jdb::XmlConfig::addNode::value" name="value">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::manualToLower" name="manualToLower">
    <brief>A manual case lowing function</brief>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::manualToLower::str" name="str">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::parseIncludes" name="parseIncludes">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method access="protected" id="jdb::XmlConfig::pathFromFilename" name="pathFromFilename">
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::pathFromFilename::str" name="str">
      <type name="string" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::sanitize" name="sanitize">
    <brief>Sanatizes node paths</brief>
    <return>
      <type name="string" />
    </return>
    <argument id="jdb::XmlConfig::sanitize::nodePath" name="nodePath">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::split" name="split">
    <brief>Splits strings using the given delim character</brief>
    <return>
      <type name="vector&lt;string&gt;" qualifier=" &amp;" />
    </return>
    <argument id="jdb::XmlConfig::split::s" name="s">
      <type name="string" qualifier=" const &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::split::delim" name="delim">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="jdb::XmlConfig::split::elems" name="elems">
      <type name="vector&lt;string&gt;" qualifier=" &amp;" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::stringToPair" name="stringToPair">
    <brief>A special case version of split used for the map decoding</brief>
    <doc>Allows string delimeter</doc>
    <return>
      <type name="pair&lt;string, string &gt;" />
    </return>
    <argument id="jdb::XmlConfig::stringToPair::s" name="s">
      <type name="string" qualifier=" &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::stringToPair::delim" name="delim">
      <type name="string" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::vectorFromString" name="vectorFromString">
    <brief>Gets a vector from comma delimeted strings</brief>
    <return>
      <type name="vector&lt;string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::vectorFromString::data" name="data">
      <type name="string" />
    </argument>
  </method>
</class>