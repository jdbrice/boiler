<class xmlns="http://jessevdk.github.com/cldoc/1.0" id="jdb::XmlConfig" interface="true" name="XmlConfig">
  <constructor abstract="yes" id="jdb::XmlConfig::XmlConfig" name="XmlConfig">
    <argument id="jdb::XmlConfig::XmlConfig::filename" name="filename">
      <type name="std::string" />
    </argument>
  </constructor>
  <destructor abstract="yes" id="jdb::XmlConfig::~XmlConfig" name="~XmlConfig" />
  <method abstract="yes" id="jdb::XmlConfig::attributeName" name="attributeName">
    <brief>jdoc{</brief>
    <doc>"name" : "string attributeName( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to Node"
        ],
        "returns" : [
                "The attribute name only"
        ],
        "desc" : "Extracts the attribute name from a full node path.

        For instance:
        The node path \"node.sub.a:name\" yields \"name\" "
}</doc>
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::attributeName::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::attributesOf" name="attributesOf">
    <brief>jdoc{</brief>
    <doc>"name" : "vector&amp;lt; string &amp;gt; attributesOf( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "List of paths to attributes."
        ],
        "desc" : "One path is added for each attribute of the given node or an empty list if no attributes are present. Use attributeName(...) to get only the attribute name from the full path."
}</doc>
    <return>
      <type name="std::vector&lt;std::string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::attributesOf::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::childrenOf" name="childrenOf">
    <brief>jdoc{</brief>
    <doc>"name" : "vector&amp;lt; string &amp;gt; childrenOf( string nodePath, int depth = -1, bool attrs = false )",
        "params" : [
                "nodePath", "depth", "attrs"
        ],
        "paramDesc" : [
                "Path to node", "Depth to search for children", "Include attribute paths"
        ],
        "returns" : [
                "List of paths to children of the given node. Empty list for no children found"
        ],
        "desc" : "Gets a list of paths to all children of a given node. Very useful for automating tasks, building lots of objects, etc."
}</doc>
    <return>
      <type name="std::vector&lt;std::string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::childrenOf::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
    <argument id="jdb::XmlConfig::childrenOf::depth" name="depth">
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::XmlConfig::childrenOf::attrs" name="attrs">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::exists" name="exists">
    <brief>jdoc{</brief>
    <doc>"name" : "bool exists( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "True: node exists",
                "False: node does not exist"
        ],
        "desc" : "Used to determine if a node exists"
}</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::XmlConfig::exists::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getBool" name="getBool">
    <brief>jdoc{</brief>
    <doc>"name" : "bool getBool( string nodePath, bool def = false )",
        "params" : [
                "nodePath", "def"
        ],
        "paramDesc" : [
                "Path to node", "Optional: Default value for node DNE"
        ],
        "returns" : [
                "The node value converted to a bool or the default if the node DNE.",
                "True: Int values &amp;gt;= 1 or case insensitive \"true\"  ",
                "False: Int values &amp;lt; 1 or case insensitive \"false\"  "
        ],
        "desc" : "Gets a nodes value and returns it as an int type.
        The strings \"true\" and \"false\" are also converted to the corresponding bool values.
        The case is not important. This allows xml files to be easier to read."
}</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::XmlConfig::getBool::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
    <argument id="jdb::XmlConfig::getBool::def" name="def">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getDouble" name="getDouble">
    <brief>jdoc{</brief>
    <doc>"name" : "double getDouble( string nodePath, double def = 0 )",
        "params" : [
                "nodePath", "def"
        ],
        "paramDesc" : [
                "Path to node", "Optional: Default value for node DNE"
        ],
        "returns" : [
                "The nodes value converted to a double or the default if the node DNE."
        ],
        "desc" : "Gets a nodes value and returns it as an double type"
}</doc>
    <return>
      <type builtin="yes" name="double" />
    </return>
    <argument id="jdb::XmlConfig::getDouble::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
    <argument id="jdb::XmlConfig::getDouble::def" name="def">
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getDoubleVector" name="getDoubleVector">
    <brief>jdoc{</brief>
    <doc>"name" : "vector&amp;lt; double &amp;gt; getDoubleVector( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "A vector of double types or an empty vector if the node DNE"
        ],
        "desc" : "See getStringVector(...).
        Converts a comma separated list into a vector of int types.
        Uses atof(...) for string to double conversion."
}</doc>
    <return>
      <type name="std::vector&lt;double&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getDoubleVector::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getFloat" name="getFloat">
    <return>
      <type builtin="yes" name="float" />
    </return>
    <argument id="jdb::XmlConfig::getFloat::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
    <argument id="jdb::XmlConfig::getFloat::def" name="def">
      <type builtin="yes" name="float" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getInt" name="getInt">
    <brief>jdoc{</brief>
    <doc>"name" : "int getInt( string nodePath, int def = 0 )",
        "params" : [
                "nodePath", "def"
        ],
        "paramDesc" : [
                "Path to node", "Optional: Default value for node DNE"
        ],
        "returns" : [
                "The nodes value converted to an integer or the default if the node DNE."
        ],
        "desc" : "Gets a nodes value and returns it as an int type"
}</doc>
    <return>
      <type builtin="yes" name="int" />
    </return>
    <argument id="jdb::XmlConfig::getInt::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
    <argument id="jdb::XmlConfig::getInt::def" name="def">
      <type builtin="yes" name="int" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getIntVector" name="getIntVector">
    <brief>jdoc{</brief>
    <doc>"name" : "vector&amp;lt; int &amp;gt; getIntVector( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "A vector of int types or an empty vector if the node DNE"
        ],
        "desc" : "See getStringVector(...).
        Converts a comma separated list into a vector of int types.
        Uses atoi(...) for string to int conversion."
}</doc>
    <return>
      <type name="std::vector&lt;int&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getIntVector::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getNodes" name="getNodes">
    <brief>jdoc{</brief>
    <doc>"name" : "vector&amp;lt;string&amp;gt; getNodes( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "List of paths to nodes matching the query"
        ],
        "desc" : "Can be used to find nodes matching a conditions
        Case 1 ) Queries like : \"group.node\" returns a list of paths to all nodes of the form \"group.node[0..N]\"
        Case 2 ) Queries like : \"group.node:name\" returns a list of paths to all nodes of the form \"group.node[0..N]\" when they contain a \"name\" attribute
        Case 3 ) Queries like : \"group.node:name=histo1\" returns a list of paths to all nodes of the form \"group.node[0..N]\" when they contain a name attribute and it equals \"histo1\"
        "
}</doc>
    <return>
      <type name="std::vector&lt;std::string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getNodes::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getString" name="getString">
    <brief>jdoc{</brief>
    <doc>"name" : "string getString( string nodePath, string def = \"\" )",
        "params" : [
                "nodePath", "def"
        ],
        "paramDesc" : [
                "Path to node", "Optional: Default returned if node DNE"
        ],
        "returns" : [
                "Value of node as an std::string"
        ],
        "desc" : "Gets the string value of a node or attribute.
        If the node or attribute does not exist then the default valuse is returned. "
}</doc>
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::getString::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
    <argument id="jdb::XmlConfig::getString::def" name="def">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::getStringVector" name="getStringVector">
    <brief>jdoc{</brief>
    <doc>"name" : "vector&amp;lt; string &amp;gt; getStringVector( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "A vector of strings or an empty vector if the node DNE"
        ],
        "desc" : "Gets a vector from a comma delimeted list.
        For instance, if a node contains \"1, 3, 9, 7, 16\" then the vector whould contain 5 elements.
        "
}</doc>
    <return>
      <type name="std::vector&lt;std::string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::getStringVector::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::operator[]" name="operator[]">
    <brief>jdoc{</brief>
    <doc>"name" : "string operator[]( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to node"
        ],
        "returns" : [
                "Value of node as an std::string"
        ],
        "desc" : "Same as getString(...) but with the [] operator."
}</doc>
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::operator[]::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::split" name="split">
    <brief>*</brief>
    <doc>Helper Methods
</doc>
    <return>
      <type name="std::vector&lt;std::string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::split::s" name="s">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::split::delim" name="delim">
      <type builtin="yes" name="char" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::tagName" name="tagName">
    <brief>jdoc{</brief>
    <doc>"name" : "string tagName( string nodePath )",
        "params" : [
                "nodePath"
        ],
        "paramDesc" : [
                "Path to Node"
        ],
        "returns" : [
                "The name of the tag pointed to by nodePath"
        ],
        "desc" : "Extracts the name of the final node (tag name )

        For instnce:
        The node path \"node.sub.a\" yields \"a\" "
}</doc>
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::tagName::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" id="jdb::XmlConfig::trim" name="trim">
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::trim::str" name="str">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::trim::whitespace" name="whitespace">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
  </method>
  <field access="protected" id="jdb::XmlConfig::rxw" name="rxw">
    <type name="RapidXmlWrapper" qualifier="*" />
  </field>
  <field access="protected" id="jdb::XmlConfig::logger" name="logger">
    <type name="Logger" ref="jdb::Logger#jdb::Logger" />
  </field>
  <field access="protected" id="jdb::XmlConfig::nodeExists" name="nodeExists">
    <type name="std::map&lt;std::string, bool&gt;" />
  </field>
  <field access="protected" id="jdb::XmlConfig::data" name="data">
    <type name="std::map&lt;std::string, std::string&gt;" />
  </field>
  <field access="protected" id="jdb::XmlConfig::isAttribute" name="isAttribute">
    <type name="std::map&lt;std::string, bool&gt;" />
  </field>
  <field access="protected" id="jdb::XmlConfig::filename" name="filename">
    <brief>pjdco{ "name" : "string filename", "desc" : "Filename of the config file"}</brief>
    <type name="std::string" />
  </field>
  <field access="protected" id="jdb::XmlConfig::attrDelim" name="attrDelim">
    <brief>pjdco{ "name" : "char attrDelim", "desc" : "The delimiter used for attributes - Default is \":\""}</brief>
    <type builtin="yes" name="char" />
  </field>
  <field access="protected" id="jdb::XmlConfig::pathDelim" name="pathDelim">
    <brief>pjdco{ "name" : "char pathDelim", "desc" : "The delimiter used for paths - Default is \".\""}</brief>
    <type builtin="yes" name="char" />
  </field>
  <field access="protected" id="jdb::XmlConfig::equalDelim" name="equalDelim">
    <brief>pjdco{ "name" : "char equalDelim", "desc" : ""}</brief>
    <type builtin="yes" name="char" />
  </field>
  <field access="protected" id="jdb::XmlConfig::indexOpenDelim" name="indexOpenDelim">
    <brief>pjdco{ "name" : "indexOpenDelim", "desc" : "The delimeter for index open - Default is \"[\""}</brief>
    <type name="std::string" />
  </field>
  <field access="protected" id="jdb::XmlConfig::indexCloseDelim" name="indexCloseDelim">
    <brief>pjdco{ "name" : "indexCloseDelim", "desc" : "The delimeter for index open - Default is \"]\""}</brief>
    <type name="std::string" />
  </field>
  <typedef access="protected" id="jdb::XmlConfig::map_it_type" name="map_it_type">
    <type name="std::map&lt;std::string, std::string&gt;" />
  </typedef>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::manualToLower" name="manualToLower">
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::manualToLower::str" name="str">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::sanitize" name="sanitize">
    <return>
      <type name="std::string" />
    </return>
    <argument id="jdb::XmlConfig::sanitize::nodePath" name="nodePath">
      <type name="std::string" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::split" name="split">
    <return>
      <type name="std::vector&lt;std::string&gt;" qualifier=" &amp;" />
    </return>
    <argument id="jdb::XmlConfig::split::s" name="s">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
    <argument id="jdb::XmlConfig::split::delim" name="delim">
      <type builtin="yes" name="char" />
    </argument>
    <argument id="jdb::XmlConfig::split::elems" name="elems">
      <type name="std::vector&lt;std::string&gt;" qualifier=" &amp;" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="jdb::XmlConfig::vectorFromString" name="vectorFromString">
    <return>
      <type name="std::vector&lt;std::string&gt;" />
    </return>
    <argument id="jdb::XmlConfig::vectorFromString::data" name="data">
      <type name="std::string" />
    </argument>
  </method>
</class>