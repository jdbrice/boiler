<class xmlns="http://jessevdk.github.com/cldoc/1.0" id="jdb::ConfigRange" name="ConfigRange">
  <brief>ConfigRange easily loads (min -&gt; max) ranges from XmlConfigs</brief>
  <doc>This class is a utility class used for quickly loading and aliasing range data in an xml config

**Headers** : ConfigRange.h

``` xml
&lt;Range min="100" max="100" /&gt;
```
</doc>
  <field id="jdb::ConfigRange::min" name="min">
    <brief>Minimum value in range</brief>
    <type builtin="yes" name="double" />
  </field>
  <field id="jdb::ConfigRange::max" name="max">
    <brief>Maximum value in range</brief>
    <type builtin="yes" name="double" />
  </field>
  <constructor id="jdb::ConfigRange::ConfigRange" name="ConfigRange">
    <brief>Load range data from an XmlConfig</brief>
    <doc>This class reads in data from an XmlConfig instance. The underlying xml should contain a node at *nodePath* like
``` xml
&lt;Range name="danny" min="100" max=":100" /&gt;
```
</doc>
    <argument id="jdb::ConfigRange::ConfigRange::cfg" name="cfg">
      <doc>XmlConfig instance to load data from</doc>
      <type name="XmlConfig" qualifier="*" ref="jdb::XmlConfig#jdb::XmlConfig" />
    </argument>
    <argument id="jdb::ConfigRange::ConfigRange::np" name="np">
      <type name="string" />
    </argument>
    <argument id="jdb::ConfigRange::ConfigRange::dMin" name="dMin">
      <doc>Default = 0 : default x value if not found in node</doc>
      <type builtin="yes" name="double" />
    </argument>
    <argument id="jdb::ConfigRange::ConfigRange::dMax" name="dMax">
      <doc>Default = 0 : default y value if not found in node</doc>
      <type builtin="yes" name="double" />
    </argument>
    <argument id="jdb::ConfigRange::ConfigRange::attrMin" name="attrMin">
      <doc>Default = ":min" : attribute tag to search for x value</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::ConfigRange::ConfigRange::attrMax" name="attrMax">
      <doc>Default = ":max" : attribute tag to search for y value</doc>
      <type name="string" />
    </argument>
  </constructor>
  <destructor id="jdb::ConfigRange::~ConfigRange" name="~ConfigRange" />
  <method id="jdb::ConfigRange::inExclusiveLowerInclusiveUpperRange" name="inExclusiveLowerInclusiveUpperRange">
    <brief> Test if the given value is in the exclusive lower inclusive upper range</brief>
    <doc>Test if value is in ( min, max ] exclusive lower and inclusive upper bound
</doc>
    <return>
      <doc>true if in range, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::ConfigRange::inExclusiveLowerInclusiveUpperRange::val" name="val">
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method id="jdb::ConfigRange::inExclusiveRange" name="inExclusiveRange">
    <brief> Test if the given value is in the exclusive range</brief>
    <doc>Test if value is in ( min, max ) exclusive lower and upper bound
</doc>
    <return>
      <doc>true if in range, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::ConfigRange::inExclusiveRange::val" name="val">
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method id="jdb::ConfigRange::inInclusiveLowerExclusiveUpperRange" name="inInclusiveLowerExclusiveUpperRange">
    <brief> Test if the given value is in the inclusive lower exclusive upper range</brief>
    <doc>Test if value is in [ min, max ) inclusive lower and exclusive upper bound
</doc>
    <return>
      <doc>true if in range, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::ConfigRange::inInclusiveLowerExclusiveUpperRange::val" name="val">
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method id="jdb::ConfigRange::inInclusiveRange" name="inInclusiveRange">
    <brief> Test if the given value is in the inclusve range</brief>
    <doc>Test if value is in [ min, max] inclusive lower and upper bound
</doc>
    <return>
      <doc>true if in range, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="jdb::ConfigRange::inInclusiveRange::val" name="val">
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method id="jdb::ConfigRange::toString" name="toString">
    <brief> Outputs the range as a human readable string</brief>
    <return>
      <doc>A string representation of the range data in the format "( min -&gt; max )"</doc>
      <type name="string" />
    </return>
  </method>
</class>