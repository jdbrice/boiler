<namespace xmlns="http://jessevdk.github.com/cldoc/1.0" id="jdb" name="jdb">
  <brief>A framework for using ROOT more efficiently.</brief>
  <doc>#Roobarb 
A framework for using the data analysis package ROOT more efficiently and with fewer headaches.

It can be used from the ROOT interpreter or as a library for compiled projects.</doc>
  <class name="ChainLoader" ref="jdb::ChainLoader#jdb::ChainLoader">
    <brief>Static use class for loading .root files into a TChain</brief>
  </class>
  <class name="CutCollection" ref="jdb::CutCollection#jdb::CutCollection" />
  <class name="DataSource" ref="jdb::DataSource#jdb::DataSource">
    <brief>Automatically maps tree branches and leaves</brief>
  </class>
  <class name="EvaluatedLeaf" ref="jdb::EvaluatedLeaf#jdb::EvaluatedLeaf">
    <brief>DataSource leaf evaluated from a function string</brief>
  </class>
  <class name="HistoAnalyzer" ref="jdb::HistoAnalyzer#jdb::HistoAnalyzer">
    <brief>Base class for creating histogram analysis projects</brief>
  </class>
  <class name="HistoBook" ref="jdb::HistoBook#jdb::HistoBook">
    <brief>A book keeper and helper for storing and using ROOT histograms</brief>
  </class>
  <class name="Logger" ref="jdb::Logger#jdb::Logger">
    <brief>An all purpose logging utility with log level functionality.</brief>
  </class>
  <class name="LoggerConfig" ref="jdb::LoggerConfig#jdb::LoggerConfig">
    <brief>A class for creating Loggers from Xml Configs</brief>
  </class>
  <class name="Reporter" ref="jdb::Reporter#jdb::Reporter">
    <brief>Create PDF Reports in ROOT</brief>
  </class>
  <class name="RooPlotLib" ref="jdb::RooPlotLib#jdb::RooPlotLib" />
  <class name="TaskFactory" ref="jdb::TaskFactory#jdb::TaskFactory">
    <brief>Manager for TaskRunner subclasses</brief>
  </class>
  <class name="TaskProgress" ref="jdb::TaskProgress#jdb::TaskProgress">
    <brief>Task Progress</brief>
  </class>
  <class name="TaskRunner" ref="jdb::TaskRunner#jdb::TaskRunner" />
  <class name="TaskTimer" ref="jdb::TaskTimer#jdb::TaskTimer">
    <brief>Task Timer</brief>
  </class>
  <class name="TreeAnalyzer" ref="jdb::TreeAnalyzer#jdb::TreeAnalyzer">
    <brief>Boiler for analyzing data distributed accross TTrees in many files</brief>
  </class>
  <class name="XmlConfig" ref="jdb::XmlConfig#jdb::XmlConfig">
    <brief>Use xml formatted config files easily in projects</brief>
  </class>
  <class name="XmlFunction" ref="jdb::XmlFunction#jdb::XmlFunction">
    <brief>Loads a TF1 or subclass function from an Xml Config</brief>
  </class>
  <class name="XmlGraph" ref="jdb::XmlGraph#jdb::XmlGraph" />
  <class name="XmlPoint" ref="jdb::XmlPoint#jdb::XmlPoint">
    <brief>Config Point easily loads (x, y) points from XmlConfigs</brief>
  </class>
  <class name="XmlRange" ref="jdb::XmlRange#jdb::XmlRange">
    <brief>XmlRange easily loads (min -&gt; max) ranges from XmlConfigs</brief>
  </class>
  <function id="jdb::dts" name="dts">
    <brief>Converts a double to a string and trims trailing zeros</brief>
    <doc>Converts a float (or double) to string and trims trailing zeros

</doc>
    <return>
      <doc>the string representation of the value</doc>
      <type name="string" />
    </return>
    <argument id="jdb::dts::d" name="d">
      <doc>double to convert</doc>
      <type builtin="yes" name="double" />
    </argument>
  </function>
  <function id="jdb::plural" name="plural">
    <brief>Used to properly pluralize words</brief>
    <doc>Example :
``` c++
cout &lt;&lt; "Hello " &lt;&lt; plural( numOfPeople, "person", "people" ) &lt;&lt; endl;
```
Will return
'Hello person' if numOfPeople == 1
and
'Hello people' otherwise

</doc>
    <return>
      <doc>the proper pluralization based on count</doc>
      <type name="string" />
    </return>
    <argument id="jdb::plural::count" name="count">
      <doc>the countable value</doc>
      <type builtin="yes" name="double" />
    </argument>
    <argument id="jdb::plural::fSingle" name="fSingle">
      <doc>the singular form</doc>
      <type name="string" />
    </argument>
    <argument id="jdb::plural::fPlural" name="fPlural">
      <doc>the plural form</doc>
      <type name="string" />
    </argument>
  </function>
  <function id="jdb::progressBar" name="progressBar">
    <brief>Plain text progress bar that only updates when it needs to</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="jdb::progressBar::i" name="i">
      <doc>the current step in a loop</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::progressBar::nevents" name="nevents">
      <doc>the maximum number of steps</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::progressBar::textWidth" name="textWidth">
      <doc>The maximum width of the bar in characters</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::progressBar::elapsedTime" name="elapsedTime">
      <doc>shows the elapsed time if positive</doc>
      <type builtin="yes" name="double" />
    </argument>
    <argument id="jdb::progressBar::skipNonTTY" name="skipNonTTY">
      <type builtin="yes" name="bool" />
    </argument>
  </function>
  <function id="jdb::trimTrailingZeros" name="trimTrailingZeros">
    <brief>Removes trailing zeros</brief>
    <return>
      <doc>The input string with trailing zeros removed</doc>
      <type name="string" />
    </return>
    <argument id="jdb::trimTrailingZeros::in" name="in">
      <doc>string representation of a number</doc>
      <type name="string" />
    </argument>
  </function>
  <function id="jdb::ts" name="ts">
    <brief>Converts an integer to a string</brief>
    <doc>Requires c++11 or newer

</doc>
    <return>
      <doc>the string representation of the value</doc>
      <type name="string" />
    </return>
    <argument id="jdb::ts::i" name="i">
      <doc>integer to convert</doc>
      <type builtin="yes" name="int" />
    </argument>
    <argument id="jdb::ts::len" name="len">
      <doc>the maximum length of string</doc>
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="jdb::ts" name="ts">
    <brief>Converts a double to a string</brief>
    <return>
      <doc>the string representation of the value</doc>
      <type name="string" />
    </return>
    <argument id="jdb::ts::d" name="d">
      <doc>double to convert</doc>
      <type builtin="yes" name="double" />
    </argument>
    <argument id="jdb::ts::len" name="len">
      <doc>the maximum length of string</doc>
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="jdb::ts" name="ts">
    <brief>Converts a float to a string</brief>
    <return>
      <doc>the string representation of the value</doc>
      <type name="string" />
    </return>
    <argument id="jdb::ts::f" name="f">
      <doc>float to convert</doc>
      <type builtin="yes" name="float" />
    </argument>
    <argument id="jdb::ts::len" name="len">
      <doc>the maximum length of string</doc>
      <type builtin="yes" name="int" />
    </argument>
  </function>
  <function id="jdb::ts" name="ts">
    <brief>Converts an unsigned integer to a string</brief>
    <return>
      <doc>the string representation of the value</doc>
      <type name="string" />
    </return>
    <argument id="jdb::ts::u" name="u">
      <doc>unsigned int to convert</doc>
      <type builtin="yes" name="unsigned int" />
    </argument>
    <argument id="jdb::ts::len" name="len">
      <doc>the maximum length of string</doc>
      <type builtin="yes" name="int" />
    </argument>
  </function>
</namespace>